from collections.abc import Iterable
from typing import Type


# , возможно, возвращать лучше Type['QHofstadter'].
#  Предварительно импортировав Type из модуля typing.


# , предлагаю попробовать решить задание классов итератором и описать вычисления в методе __next__.
#  В таком случае, цикл while не потребуется. =)
class QHof:

    def __init__(self, number_list: list):
        # , в этот класс стоит передавать список.
        self.Q = number_list
        # , предлагаю перенести в __iter__

    def __iter__(self):
        self.count = 0
        # , стоит добавить переменную счётчик равную "0"
        #  Далее в next первый элемент будет равен "переменная счётчик" + 1 - предыдущее значение
        #  второй элемент будет равен "переменная счётчик" + 1 - ПРЕДпредыдущее значение
        return self

    def __next__(self):
        if len(self.Q) != 2 or self.Q != [1, 1]:
            raise StopIteration
        # , если длина списка не равна 2 или список не [1, 1],
        #  стоит выйти из последовательности при помощи вызова StopIteration.
        # TODO, следующие действия стоит производить, если текущая длина списка меньше или равна текущему элементу + 1 =)
        if len(self.Q) <= self.count + 1:
            q1 = self.count + 1 - self.Q[-1]
            q2 = self.count + 1 - self.Q[-2]
            q = self.Q[q1] + self.Q[q2]  # , q1 и q2 это индексы списка self.Q =) Предлагаю искать элементы и складывать их.
        # , по идее, за 1 раз необходимо создавать 2 числа и 2 числа добавлять в список.\
        # , по идее q1 и q2 это индексы списка self.Q, предлагаю попробовать добавлять только их сумму. Один раз.
            self.Q.append(q)
            self.count += 1
        # , стоит увеличивать count на 1.
        return q  # , возвращать предлагаю элемент который добавили в список


qlist = [1, 1]
Q = QHof(qlist)
for item in Q:
    print(item)
